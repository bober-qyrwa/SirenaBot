from databese import *
import telebot
import config
room = 0
# conctants
bot = telebot.TeleBot(config.tg_api_key)
group_id = config.test_id
create_table()

'''----bot commands----'''
@bot.message_handler(commands=["start"])
# func for command /start: Starts user registration
def start(message):
    chat_id = message.chat.id
    if str(chat_id)[:4] == "-100":
        bot.send_message(chat_id, f'@{message.from_user.username}, —Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –∫–æ–º–Ω–∞—Ç—ãüôè')
    else:
        bot.send_message(chat_id, '''–ü—Ä–∏–≤–µ—Ç! –°–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –∫–æ–º–Ω–∞—Ç—ãüôè''')


@bot.message_handler(commands=["corridor_warning"])
# func for command /corridor_warning: Creates a selection of points in corridor
def corridor_warning(message):
    chat_id = message.chat.id
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    # create buttons for markup
    ledder_left = telebot.types.InlineKeyboardButton("–õ–µ–≤–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞", callback_data="ledder_left")
    ledder_right = telebot.types.InlineKeyboardButton("–ü—Ä–∞–≤–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞", callback_data="ledder_right")
    coller = telebot.types.InlineKeyboardButton("–ö—É–ª–µ—Ä", callback_data="coller")
    # create markup
    markup.add(ledder_left, coller, ledder_right)
    # send message
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Å—Ç–æ –≤ –∫–æ—Ä–∏–¥–æ—Ä–µ, –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–æ–∂–∞—Ç—ã–µ", reply_markup=markup)


@bot.message_handler(commands=['warning'])
# func for command /warning: Creates a warning mailinh list for group and messages
def warning(message):
    global room
    chat_id = message.chat.id
    username = message.from_user.username
    usernames = getUserFromDB()
    print(usernames)
    if chat_id != group_id:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ –≥—Ä—É–ø–ø—ã
        room = getRoomByID(chat_id)
    else:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã
        room = getRoomByUsername(username) if username else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π"

    if room:
        char = ''
        for name_tuple in usernames:
            if name_tuple[0]:
                for name in name_tuple:
                    char += f'@{name}, '
        bot.send_message(group_id, f'''–í–æ–∂–∞—Ç—ã–µ –≤ {room} –∫–æ–º–Ω–∞—Ç–µ, {char[:-2]}!''')
        

        chat_list = getIDsFromDB()
        for id in chat_list:
            bot.send_message(id, f'''–í–æ–∂–∞—Ç—ã–µ –≤ {room} –∫–æ–º–Ω–∞—Ç–µ!''')
    else:
        bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É")


@bot.message_handler(commands=["show_3_floor"])
def show_3_floor(message):
    global room
    # room = 314
    chat_id = message.chat.id
    if str(chat_id)[:4] == "-100":
        username = message.from_user.username
        bot.send_photo(chat_id, open(f"3_floor\\{room}.jpg","rb"), caption=f"@{username}, –ª–æ–≤–∏)")
    else:
        bot.send_photo(chat_id, open(f"3_floor\\{room}.jpg","rb"), caption="–õ–æ–≤–∏)")
        bot.send_message(chat_id, "–ï—Å–ª–∏ —á—Ç–æ, –∫—Ä–∞—Å–Ω—ã–π –∫—Ä—É–∂–æ–∫ ‚Äî —ç—Ç–æ –∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–æ–∂–∞—Ç—ã—Ö")


'''----callback handler by corridor----'''
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    global room
    current_place = ""
    if call.message:
        match call.data:
            case "ledder_left":
                current_place = "–ª–µ–≤–æ–π –ª–µ—Å—Ç–Ω–∏—Ü—ã"
            case "coller":
                current_place = "–∫—É–ª–µ—Ä–∞"
            case "ledder_right":
                current_place = "–ø—Ä–∞–≤–æ–π –ª–µ—Å—Ç–Ω–∏—Ü—ã"
        bot.delete_message(group_id,
                           message_id=call.message.message_id)
        usernames = getUserFromDB()
        for name in usernames:
            if name[0]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ username —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                bot.send_message(group_id, f'''–í–æ–∂–∞—Ç—ã–µ —É {current_place}, @{name[0]}!''')


'''----message handler----'''
@bot.message_handler(func=lambda message: True, content_types=['text'])
def msg_answer(message):
    global room
    chat_id = message.chat.id
    if str(chat_id)[:4] != "-100":
        chat_list = getIDsFromDB()
        if chat_id in chat_list:
            bot.send_message(chat_id, f'''–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ''')
        else:
            username = message.from_user.username
            room = message.text
            # validation for room
            try:
                int(room)
                if 314 >= int(room) and int(room) >= 300:
                    stack_db(chat_id, username, room)
                    bot.send_message(chat_id, f'''‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã''')
            except ValueError:
                bot.send_message(chat_id, "–¢—ã –≤–≤—ë–ª –Ω–µ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã! –ù–∞–ø–∏—à–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 308")


if __name__ == "__main__":
    bot.infinity_polling()
